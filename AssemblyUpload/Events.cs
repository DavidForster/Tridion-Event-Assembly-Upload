using DavidForster.Tridion.EventHandlers.AssemblyUpload.Model;
using System;
using Tridion.ContentManager.CommunicationManagement;
using Tridion.ContentManager.Extensibility;
using Tridion.ContentManager.Extensibility.Events;

namespace DavidForster.Tridion.EventHandlers.AssemblyUpload
{
    [TcmExtension("Assembly Upload")]
    public class Events : TcmExtension
    {
        private const string CSharpTemplateBuildingBlockContent = "/* This template was generated by the Upload Assembly Event Handler */\n<%RunTemplate Template=\"{0}\" Class=\"{1}\"%>";

        public Events()
        {
            EventSystem.Subscribe<TemplateBuildingBlock, SaveEventArgs>(OnTemplateBuildingBlockSave, EventPhases.Processed);
        }

        private static void OnTemplateBuildingBlockSave(TemplateBuildingBlock subject, SaveEventArgs e, EventPhases phase)
        {
            if (!subject.IsAssemblyTemplateBuildingBlock())
                return;

            var templatingAssembly = new TemplatingAssembly(subject);

            var session = subject.Session;

            foreach (var cSharpTemplateBuildingBlock in templatingAssembly.CSharpTemplateBuildingBlocks)
            {
                //If a TBB already exists
                if (session.IsExistingObject(String.Concat(subject.OrganizationalItem.WebDavUrl, "/", cSharpTemplateBuildingBlock.Title, ".", "tbbcs")))
                    continue;

                //Create a new C# TBB
                var templateBuildingBlock = new TemplateBuildingBlock(session, subject.OrganizationalItem.Id)
                {
                    Title = cSharpTemplateBuildingBlock.Title,
                    TemplateType = TemplateTypes.CSharpTemplate,
                    Content = String.Format(CSharpTemplateBuildingBlockContent, templatingAssembly.Id, cSharpTemplateBuildingBlock.ClassName)
                };

                templateBuildingBlock.Save(true);
            }
        }
    }
}
