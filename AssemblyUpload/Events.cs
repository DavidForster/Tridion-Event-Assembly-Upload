using System;
using System.Linq;
using System.Reflection;
using Tridion.ContentManager.CommunicationManagement;
using Tridion.ContentManager.Extensibility;
using Tridion.ContentManager.Extensibility.Events;
using Tridion.ContentManager.Templating.Assembly;

namespace DavidForster.Tridion.EventHandlers.AssemblyUpload
{
    [TcmExtension("Assembly Upload")]
    public class Events : TcmExtension
    {
        private const string AssemblyTemplateTypeName = "AssemblyTemplate";
        private const string CSharpTemplateTypeName = "CSharpTemplate";
        private const string CSharpTemplateBuildingBlockContent = "/* This template was generated by the Upload Assembly Event Handler */\n<%RunTemplate Template=\"{0}\" Class=\"{1}\"%>";

        public Events()
        {
            EventSystem.Subscribe<TemplateBuildingBlock, SaveEventArgs>(OnTemplateBuildingBlockSave, EventPhases.Processed);
        }

        private static void OnTemplateBuildingBlockSave(TemplateBuildingBlock subject, SaveEventArgs e, EventPhases phase)
        {
            //If this is not an Assembly TBB
            if (subject.TemplateType != AssemblyTemplateTypeName)
                return;

            //Load the assembly
            var templatingAssembly = Assembly.Load(subject.BinaryContent.GetByteArray());

            //For each class in the assembly
            foreach (var type in templatingAssembly.GetTypes())
            {
                //If the class is not concrete
                if (type.IsAbstract)
                    continue;

                //If the class does not implement ITemplate
                if (!(type.GetInterfaces().Contains(typeof(ITemplate))))
                    continue;

                //Get the template title if specified or just use the class name
                var titleAttribute = type.GetCustomAttribute<TcmTemplateTitle>();
                var templateTitle = titleAttribute == null ? type.Name : titleAttribute.Title;

                //If a TBB already exists
                if (subject.Session.IsExistingObject(String.Concat(subject.OrganizationalItem.WebDavUrl, "/", templateTitle, ".", "tbbcs")))
                    continue;

                //Create a new C# TBB
                var templateBuildingBlock = new TemplateBuildingBlock(subject.Session, subject.OrganizationalItem.Id)
                {
                    Title = templateTitle,
                    TemplateType = CSharpTemplateTypeName,
                    Content = String.Format(CSharpTemplateBuildingBlockContent, subject.Id, type.FullName)
                };

                templateBuildingBlock.Save(true);
            }
        }
    }
}
